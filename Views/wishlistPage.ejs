<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Wishlist - ShopGenie</title>
  <!-- Bootstrap CSS CDN -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
    .navbar-nav {
      display: flex;
      align-items: center;
    }
    
    .nav-item {
      margin-left: 15px;
    }
    
    .nav-item form {
      display: flex;
      align-items: center;
    }
    
    .nav-item a.btn {
      margin-left: 10px;
    }
    :root {
      --secondary-color: #9c27b0;
      --accent-color: #e1bee7;
      --text-color: #333;
      --light-bg: #f8f9fa;
    }

    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      color: var(--text-color);
      background: linear-gradient(195deg, #9c27b0, #e1bee7);
    }

    .navbar {
      padding: 1rem 0;
    }

    .navbar-brand {
      font-size: 1.8rem;
      font-weight: bold;
      color: white !important;
    }

    .nav-link {
      color: rgba(255, 255, 255, 0.9) !important;
      font-weight: 500;
      transition: color 0.3s ease;
    }

    .nav-link:hover {
      color: var(--accent-color) !important;
    }

    .product-grid {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-around;
      margin-top: 2rem;
    }

    .product-container {
      background: white;
      border-radius: 10px;
      overflow: hidden;
      margin-bottom: 2rem;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      width: 350px; /* Increased product container width */
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .product-container:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    .product-image {
      width: 100%;
      height: auto;
      aspect-ratio: 16 / 9; /* Maintain aspect ratio */
      object-fit: contain; /* Fit the entire image without zooming */
      transition: transform 0.3s ease;
    }

    .product-container:hover .product-image {
      transform: scale(1.05);
    }

    .product-title {
      padding: 1rem;
      text-align: left;
      font-size: 1.2rem;
      font-weight: 400;
      color: var(--secondary-color);
    }

    .icon-buttons {
      padding: 0.5rem;
      text-align: center;
      background: var(--light-bg);
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
    }

    .icon-buttons i {
      font-size: 1.5rem;
      margin: 0 10px;
      cursor: pointer;
    }

    .icon-buttons i:hover {
      color: var(--secondary-color);
    }

    .platforms {
      padding: 0 1rem 1rem;
      display: flex;
      justify-content: space-between;
    }

    .platform {
      flex-basis: 30%; 
    }

    .platform-container {
      padding: 0.2rem;
      background: var(--light-bg);
      border-radius: 10px;
      text-align: center;
      height: 190px; 
    }

    .platform-logo {
      max-height: 30px;
      max-width: 30px;
      margin-bottom: 0.5rem;
    }

    .star-rating {
      font-size: 1rem;
      color: #ffb400;
    }

    .page-item.active .page-link {
      background-color: var(--secondary-color);
      border-color: var(--secondary-color);
    }

    .footer {
      text-align: center;
      padding: 2px;
      background-color: rgba(211, 211, 211, 0.274);
      color: var(--secondary-color);
      font-weight: bold;
      font-size: large;
    }

    @media (max-width: 768px) {
      .product-grid {
        flex-direction: column;
        align-items: center;
      }

      .platforms {
        flex-direction: column; /* Stack platforms vertically on smaller screens */
      }

      .platform {
        margin-bottom: 1rem;
      }
    }
  </style>
</head>
<body>

  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container">
      <a class="navbar-brand" href="/">✨ ShopGenie</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ml-auto align-items-center">
          <li class="nav-item">
            <a class="nav-link" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">About Us</a>
          </li>
          <!-- username else login -->
          <li class="nav-item">
            <% if (user) { %>
              <a class="btn btn-outline-danger rounded-pill ms-3" href="/auth/logout" style="padding:10px; background-color:#e1bee7; color: #6a1b9a; font-weight: bold; border: 1px solid #6a1b9a;">
                Logout
              </a>
              <!-- <span class="nav-link"><%= user.name %></span> -->
              <% } else { %>
                <a class="btn btn-outline rounded-pill ms-3" href="/auth/login"
                style="padding: 8px 20px; background-color:#e1bee7; color: #6a1b9a; font-weight: bold; border: 1px solid #6a1b9a;">
                Login
                </a>
                <% } %>
          </li>

        </ul>
      </div>
    </div>
  </nav>
  <!-- Wishlist Product Grid -->
  <div class="container">
    <div class="product-grid">
      <% products.forEach(product => { %>
        <div class="product-container" data-product-id="<%= product.productID %>">
          <!-- Icon Buttons -->
          <div class="icon-buttons text-center">
            <i class="fas fa-trash-alt wishlist-remove-button" title="Remove from Wishlist" onclick="removeFromWishlist('<%= product.productID %>')"></i>
            <i class="fas fa-gem" title="Recommend" onclick="recommendBestProduct('<%= product.title %>', <%= JSON.stringify(product.platforms) %>, '<%= product.link %>')"></i>
            <i class="fas fa-chart-line" title="Analytics" onclick="viewAnalytics('<%= product.productID %>')"></i>
          </div>

          <div class="d-flex align-items-center justify-content-center">
            <img src="<%= product.image %>" alt="<%= product.title %>" class="product-image">
          </div>

          <h3 class="product-title"><%= product.title %></h3>

          <!-- Platform Info -->
          <div class="platforms">
            <% product.platforms.forEach(platform => { %>
              <div class="platform">
                <div class="platform-container">
                  <a href="<%= platform.link %>" target="_blank">
                    <img src="<%= platform.icon %>" class="platform-logo">
                  </a>
                  <p>Price: ₹<%= platform.price %></p>
                  <p style="text-decoration: line-through;">MRP: ₹<%= platform.maxprice %></p>
                  <p class="star-rating">Rating:
                    <span class="rating-value"><%= platform.ratings %></span>
                    <i class="fas fa-star"></i>
                  </p>
                </div>
              </div>
            <% }); %>
          </div>
        </div>
      <% }); %>
    </div>
  </div>

  <!-- Pagination -->
  <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
      <% if (currentPage > 1) { %>
        <li class="page-item">
          <a class="page-link" href="/wishlist/wishlistPage?page=<%= currentPage - 1 %>">Previous</a>
        </li>
      <% } %>
      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
          <a class="page-link" href="/wishlist/wishlistPage?page=<%= i %>"><%= i %></a>
        </li>
      <% } %>
      <% if (currentPage < totalPages) { %>
        <li class="page-item">
          <a class="page-link" href="/wishlist/wishlistPage?page=<%= currentPage + 1 %>">Next</a>
        </li>
      <% } %>
    </ul>
  </nav>
  <!-- Modal for Recommended Product -->
  <div class="modal fade" id="recommendedModal" tabindex="-1" aria-labelledby="recommendedModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="recommendedModalLabel">ShopGenie's Recommended Product</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="color: #9c27b0; font-size: 1.5rem; opacity: 1; padding: 5px; text-align: center;">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <p>ShopGenie recommends the following product:</p>
          <h5 id="recommended-product-name"></h5>
          <p>Price: <span id="recommended-product-price"></span></p>
          <p>Rating: <span id="recommended-product-rating"></span> <i class="fas fa-star"></i></p>
          <p>Platform: <span id="recommended-product-platform"></span></p>
        </div>
        <div class="modal-footer">
          <a href="#" id="recommended-product-link" class="btn btn-primary">Go to Product</a>
        </div>
      </div>
    </div>
  </div>

    <!-- Modal for Analytics Graph -->
    <div class="modal fade" id="analyticsModal" tabindex="-1" aria-labelledby="analyticsModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="analyticsModalLabel">Product Analytics</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"
              style="color: #9c27b0; font-size: 1.5rem; opacity: 1; padding: 5px; text-align: center;">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <canvas id="priceChart" width="400" height="200"></canvas>
          </div>
  
        </div>
      </div>
    </div>

  <!-- Footer -->
  <div class="footer">
    <p>&copy; 2024 ShopGenie. All rights reserved.</p>
  </div>

  <!-- Bootstrap JS CDN -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    function removeFromWishlist(productID) {
      const button = document.querySelector(`[onclick="removeFromWishlist('${productID}')"]`);
      fetch(`/wishlist/remove`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ productID: productID })
      })
      .then(response => response.json())
      .then(response => {
        if (response.message) {
          alert(response.message);
          const productElement = document.querySelector(`[data-product-id="${productID}"]`);
          productElement.remove();
        }
      })
      .catch(error => alert("An error occurred."));
    }

    function recommendBestProduct(productName, platforms, productLink) {
      let maxScore = -Infinity;
      let bestPlatform = null;

      const maxPrice = Math.max(...platforms.map(p => parseFloat(p.price) || 0));
      const maxRating = Math.max(...platforms.map(p => parseFloat(p.ratings) || 0));

      platforms.forEach(platform => {
        const normalizedPrice = maxPrice > 0 ? (parseFloat(platform.price) || 0) / maxPrice : 1;
        const normalizedRating = maxRating > 0 ? (parseFloat(platform.ratings) || 0) / maxRating : 0;
        const score = 0.7 * normalizedRating - 0.3 * normalizedPrice;

        if (score > maxScore) {
          maxScore = score;
          bestPlatform = platform;
        }
      });

      if (bestPlatform) {
        document.getElementById('recommended-product-name').innerText = productName;
        document.getElementById('recommended-product-price').innerText = `₹${bestPlatform.price}`;
        document.getElementById('recommended-product-rating').innerText = bestPlatform.ratings;
        document.getElementById('recommended-product-platform').innerText = bestPlatform.name;
        document.getElementById('recommended-product-link').href = bestPlatform.link;
        const modal = new bootstrap.Modal(document.getElementById('recommendedModal'));
        modal.show();
      }
    }

    let chartInstance = null;  // Declare a variable to hold the chart instance

function viewAnalytics(productID) {
  console.log('Analytics clicked for product ID:', productID);  // Debugging log
  fetch(`/analytics/${productID}`)
    .then(response => response.json())
    .then(data => {
      if (data && data.priceHistory) {
        const platforms = ['Flipkart', 'Myntra', 'Amazon'];
        const priceData = {
          labels: [], // Dates
          datasets: platforms.map((platform, index) => ({
            label: platform,
            data: [],
            borderColor: index === 0 ? 'red' : index === 1 ? 'blue' : 'green',
            fill: false,
            tension: 0.1
          }))
        };

        // Ensure all required dates and prices are included
        const currentDate = new Date();
        const allDates = [...new Set(data.priceHistory.flatMap(p => p.dates))];
        if (!allDates.includes(currentDate.toISOString())) {
          allDates.push(currentDate.toISOString());
        }
        allDates.sort(); // Sort dates chronologically

        priceData.labels = allDates.map(date => {
          return new Date(date).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });
        });

        // Populate prices for each platform
        platforms.forEach((platform, platformIndex) => {
          const platformData = data.priceHistory.find(p => p.platformName === platform);
          const pricesByDate = {};

          // Map existing prices to dates
          platformData.dates.forEach((date, i) => {
            pricesByDate[date] = platformData.prices[i];
          });

          // Populate data for all dates, interpolating or extending prices
          allDates.forEach(date => {
            if (pricesByDate[date] !== undefined) {
              priceData.datasets[platformIndex].data.push(pricesByDate[date]);
            } else {
              // Extend with the last known price
              const lastKnownPrice = platformData.prices[platformData.prices.length - 1] || 0;
              priceData.datasets[platformIndex].data.push(lastKnownPrice);
            }
          });
        });

        // Destroy the previous chart instance if it exists
        if (chartInstance) {
          chartInstance.destroy();
        }

        // Create the chart
        const ctx = document.getElementById('priceChart').getContext('2d');
        chartInstance = new Chart(ctx, {
          type: 'line',
          data: priceData,
          options: {
            scales: {
              x: {
                type: 'category',
                labels: priceData.labels,
                title: {
                  display: true,
                  text: 'Dates'
                }
              },
              y: {
                title: {
                  display: true,
                  text: 'Price (₹)'
                }
              }
            },
            plugins: {
              tooltip: {
                callbacks: {
                  label: function (context) {
                    const rawDate = allDates[context.dataIndex];
                    const formattedDate = new Date(rawDate).toLocaleDateString('en-GB', {
                      day: '2-digit',
                      month: 'short',
                      year: 'numeric'
                    });
                    return `Price: ₹${context.raw}, Date: ${formattedDate}`;
                  }
                }
              }
            }
          }
        });

        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('analyticsModal'));
        modal.show();
      }
    })
    .catch(error => console.error('Error fetching analytics data:', error));
}

// When the modal is closed, reset the chartInstance
$('#analyticsModal').on('hidden.bs.modal', function () {
  if (chartInstance) {
    chartInstance.destroy();
    chartInstance = null;  // Reset the chartInstance variable
  }
});



  </script>
</body>
</html>
